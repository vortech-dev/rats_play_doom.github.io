
Intro
We built a complete VR setup from scratch to let rats play DOOM. The system includes a motion-tracked treadmill ball, a panoramic headset, an input trigger, and a reward circuit. All hardware and software components are open sourced, including 3D-printable designs, circuit diagrams, firmware, and control software.

The first version (v1) was built in New York by Viktor, who trained rats to walk through a corridor in DOOM using a simpler rig. That version was featured on Vice and PC Gamer. After moving back home, the project was paused. Public interest reignited development, leading to v2, a more advanced and modular version built in collaboration with electrical engineer Sándor Makra.

V1
Basic ball setup

Rats trained to run forward

Minimal sensors and mechanics

No panoramic screen

V2
New ball driver mechanism for smoother movement

Foldable AMOLED screen with 180° horizontal and 80° vertical FOV, Full HD resolution

Upgraded sensors for movement tracking

Reinforced feeder system with mixing motor

Modular 3D-printable components

Improved electronics reliability and safety

[IMG: Full setup from side showing rat on ball, screen around, trigger, and water tube.]

Limitations
We reached the point of rat habituation but didn’t start training. Our rats (Todd, Kojima, Gabe) aged out before full testing. The setup works, but behavioral validation is pending.

Hardware
Visual Interface
The headset wraps around the rat’s head with a foldable AMOLED screen. It maximizes immersion without obstructing whisker space. The screen supports Full HD resolution.

[IMG: Headset close-up from above.]

Locomotion
Movement is captured via a free-spinning ball under the rat. Rotary sensors track displacement and convert it into game motion. The ball can also be driven by motors.

These motors are used during training to roll the ball and simulate movement paths before a reward. This guides the rat on where to go, helping form movement-action associations. Like the trigger, this allows for programmatic training sequences with minimal initial input from the animal.

[IMG: Ball mount showing driven/undriven modes and sensor placement.]

Trigger Input
The shooting input is a custom-built hand-operated lever. Rats pull it with their paws to fire. The lever is held in place by small springs, encased in a 3D-printed housing. It includes a rotary encoder to detect motion and a stepper motor to actuate it.

The motor allows programmatic control—pulling the lever to demonstrate shooting. This enables training by pairing visual cues with mechanical motion, reinforcing the association before the rat initiates the action on its own.

[IMG: Close-up of trigger lever with encoder and motor.]

Reward System
Positive in-game actions trigger a liquid reward: sugar water delivered through a precise dispensing mechanism. The system consists of:

Mixer: Continuously stirs the sugar solution to maintain even concentration

Pump + Pressure Sensor: Keeps the line under constant pressure

Solenoid Valve: Magnetic valve that opens to release exact 10 µL doses

Dispenser: Positioned near the mouth for easy access

This setup ensures accurate, repeatable reward delivery with minimal delay. The reward is synchronized with game events to reinforce desired behaviors.

[IMG: Reward circuit with labeled mixer, pump, valve, and dispenser.]

Limitations
The current system assumes basic rat mobility and grooming behavior. Fine-tuning might be needed for rats of different sizes or temperaments. Trigger placement and reward tube flow may need calibration per subject.

Software
The setup is controlled through a modular Python system.
The main entry point is arena_scenario.py, which runs the full control loop.

The system includes:

Motion capture: Reads movement from optical flow sensors mounted around the treadmill ball.

Locomotion control: Drives the ball motors to guide the rat during training.

Trigger input: Reads lever pulls, detects voluntary shooting actions.

Reward delivery: Dispenses precise 10 μL sugar water rewards via a controlled solenoid valve and maintains constant line pressure.

DOOM integration: Interfaces with a modified ViZDoom environment for real-time closed-loop behavior.

Training logic: Enforces demonstrations and delivers rewards based on game state and rat behavior.

The software runs on a PC and communicates with a Raspberry Pi via TCP sockets.
The Pi handles real-time sensor reading, ball actuation, and reward control; the PC processes the sensor data, runs the game, and sends high-level commands to the Pi.

All major components—movement tracking, ball driving, trigger detection, and reward control—can be operated manually or in closed-loop mode.
All control parameters (e.g., motor speeds, reward volumes) are set in Python code.

[IMG: Diagram showing PC-Pi communication, sensors, motors, and game loop overview.]

Limitations
There’s no in-built calibration suite. Users must validate sensor alignment and reward timing manually. Some microcontroller firmwares might require tuning based on hardware tolerances.

Results
We validated the hardware and software setup up to the habituation phase. The rats stood calmly on the platform and tolerated the headset and feeder tube.

[VIDEO: Rat standing on platform with panoramic screen active.]

Observed:

Stable platform behavior for minutes

Responsive and accurate ball motion tracking

Reliable programmatic control of both ball driving and trigger actuation

Reliable feeder system dispensing small, precise water rewards

Limitations
The rats did not interact with the trigger during tests. Full gameplay training was not completed. Behavioral validation remains pending for future trials with younger rats.